/*
 * This file is generated by jOOQ.
 */
package org.example.mnpg.db.tables.records;


import java.time.LocalDateTime;

import org.example.mnpg.db.tables.TOperationLog;
import org.example.mnpg.db.tables.pojos.OperationLogDO;
import org.jooq.Field;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OperationLogRecord extends TableRecordImpl<OperationLogRecord> implements Record3<LocalDateTime, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>mnpg.operation_log.operation_time</code>.
     */
    public void setOperationTime(LocalDateTime value) {
        set(0, value);
    }

    /**
     * Getter for <code>mnpg.operation_log.operation_time</code>.
     */
    public LocalDateTime getOperationTime() {
        return (LocalDateTime) get(0);
    }

    /**
     * Setter for <code>mnpg.operation_log.operator</code>.
     */
    public void setOperator(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>mnpg.operation_log.operator</code>.
     */
    public String getOperator() {
        return (String) get(1);
    }

    /**
     * Setter for <code>mnpg.operation_log.operation_type</code>.
     */
    public void setOperationType(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>mnpg.operation_log.operation_type</code>.
     */
    public String getOperationType() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<LocalDateTime, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<LocalDateTime, String, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<LocalDateTime> field1() {
        return TOperationLog.OPERATION_LOG.OPERATION_TIME;
    }

    @Override
    public Field<String> field2() {
        return TOperationLog.OPERATION_LOG.OPERATOR;
    }

    @Override
    public Field<String> field3() {
        return TOperationLog.OPERATION_LOG.OPERATION_TYPE;
    }

    @Override
    public LocalDateTime component1() {
        return getOperationTime();
    }

    @Override
    public String component2() {
        return getOperator();
    }

    @Override
    public String component3() {
        return getOperationType();
    }

    @Override
    public LocalDateTime value1() {
        return getOperationTime();
    }

    @Override
    public String value2() {
        return getOperator();
    }

    @Override
    public String value3() {
        return getOperationType();
    }

    @Override
    public OperationLogRecord value1(LocalDateTime value) {
        setOperationTime(value);
        return this;
    }

    @Override
    public OperationLogRecord value2(String value) {
        setOperator(value);
        return this;
    }

    @Override
    public OperationLogRecord value3(String value) {
        setOperationType(value);
        return this;
    }

    @Override
    public OperationLogRecord values(LocalDateTime value1, String value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached OperationLogRecord
     */
    public OperationLogRecord() {
        super(TOperationLog.OPERATION_LOG);
    }

    /**
     * Create a detached, initialised OperationLogRecord
     */
    public OperationLogRecord(LocalDateTime operationTime, String operator, String operationType) {
        super(TOperationLog.OPERATION_LOG);

        setOperationTime(operationTime);
        setOperator(operator);
        setOperationType(operationType);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised OperationLogRecord
     */
    public OperationLogRecord(OperationLogDO value) {
        super(TOperationLog.OPERATION_LOG);

        if (value != null) {
            setOperationTime(value.getOperationTime());
            setOperator(value.getOperator());
            setOperationType(value.getOperationType());
            resetChangedOnNotNull();
        }
    }
}
